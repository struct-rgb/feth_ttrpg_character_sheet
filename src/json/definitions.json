{
  "stats": {
    "names": [
      "hp",
      "str",
      "mag",
      "dex",
      "spd",
      "def",
      "res",
      "lck",
      "mov"
    ],
    "first": [
      "hp",
      "str",
      "mag",
      "dex",
      "spd",
      "def",
      "res",
      "lck",
      "mov"
    ],
    "second": [
      "mt",
      "prot",
      "resl",
      "hit",
      "avo",
      "crit",
      "cravo",
      "minrng",
      "maxrng",
      "sp",
      "tp",
      "spcost",
      "tpcost",
      "doubles",
      "doubled"
    ],
    "battalion": {
      "first": [
        "end",
        "atk",
        "prot",
        "resl",
        "auto",
        "plu"
      ],
      "second": [
        "mor",
        "br",
        "minrng",
        "maxrng",
        "hit",
        "mt",
        "epcost"
      ],
      "growths": [
        "end",
        "atk",
        "prot",
        "resl"
      ],
      "gambit": [
      
      ]
    }
  },
  "skills": [
    "Axes",
    "Swords",
    "Lances",
    "Brawl",
    "Bows",
    "Reason",
    "Faith",
    "Guile",
    "Authority",
    "Armor",
    "Riding",
    "Flying"
  ],
  "macros": [
    {
      "define": [
        "template affirm(title, yes, no)",
        "  ask [title]",
        "    , No  { no  }",
        "    ; Yes { yes }",
        "  end",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the No option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes",
        "an expression for if user selects No"
      ]
    },
    {
      "define": [
        "template deny(title, yes, no)",
        "  ask [title]",
        "    ; Yes { yes }",
        "    , No  { no  }",
        "  end",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the Yes option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes",
        "an expression for if user selects No"
      ]
    },
    {
      "define": [
        "template confirm(title, multiplier)",
        "  ((",
        "    ask [title]",
        "      ; No  { 0 }",
        "      , Yes { 1 }",
        "    end",
        "  ) * (",
        "    multiplier",
        "  ))",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the No option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes (no is zero)."
      ]
    },
    {
      "define": [
        "template refuse(title, multiplier)",
        "  ((",
        "    ask [title]",
        "      ; Yes { 1 }",
        "      , No  { 0 }",
        "    end",
        "  ) * (",
        "    multiplier",
        "  ))",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the Yes option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes (no is zero)."
      ]
    },
    {
      "define": [
        "template blow(mod)",
        "  bothif not(unit|tagged|healing)",
        "    then fill affirm(cat([Unit Initiated? #], mod), mod, 0)",
        "    else 0",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the *blow family of skills that give in-combat bonuses ",
        "when unit initiates combat."
      ],
      "args": [
        "an expression for the bonus granted"
      ]
    },
    {
      "define": [
        "template bowhit(base)",
        "  base",
        "end"
      ],
      "about": [
        "Applies the range penalty prompt to a bow's hit formula"
      ],
      "args": [
        "an expression for the bow's base hit"
      ]
    },
    {
      "define": [
        "template stance(modifier)",
        "  fill affirm(cat([Foe Initiated? #], modifier), modifier, 0)",
        "end"
      ],
      "about": [
        "Macro for the * stance family of skills that give in-combat bonuses ",
        "when a foe initiates combat."
      ],
      "args": [
        "an expression for the bonus granted"
      ]
    },
    {
      "define": [
        "template advantage(variable)",
        "  bothif variable",
        "    then",
        "      more",
        "        metaif builtins|macrogen",
        "          then other|triangle|prompt",
        "          else other|triangle",
        "        end",
        "      else 0 end / 3",
        "    else 0",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the * advantage family of skills that give Mt +5 in ",
        "combat when unit has weapon triangle advantage."
      ],
      "args": [
        "a variable to test for the weapon type"
      ]
    },
    {
      "define": [
        "template defiant(bonus)",
        "  ask cat([HP ≤ 25%? #], bonus)",
        "    , No     {0}",
        "    ; Yes    {bonus}",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the Defiant *  family of skills that give stat bonuses in ",
        "combat when unit is at ≤ 25% HP."
      ],
      "args": [
        "an expression for the bonus to give"
      ]
    },
    {
      "define": [
        "template faire(variable)",
        "  bothif variable then 5 else 0 end",
        "end"
      ],
      "about": [
        "Macro for the * advantage family of skills that give Mt +5 in ",
        "combat when unit uses associate weapon type."
      ],
      "args": [
        "a variable to test for the weapon type"
      ]
    },
    {
      "define": [
        "template simplify(expression)",
        "  metaif builtins|macrogen == 1",
        "    then meta(expression)",
        "    else expression",
        "  end",
        "end"
      ],
      "about": [
        "Simplifies expressions in generated Roll20 macros by using [meta] ",
        "to evaluate them at compile time. Using this is safer than using ",
        "meta directly, since it includes a [metaif] guard to evaluate ",
        "the expression normally during runtime."
      ],
      "args": [
        "an expression to evaluate/simplify"
      ]
    },
    {
      "define": [
        "template scale(base, title, variable)",
        "  base + floor(([title] {fill simplify(variable)}) * 0.3)",
        "end"
      ],
      "about": [
        "Implements those combat arts that scale based off of a specific ",
        "statistic. This is a standart template so that if the way they're ",
        "computed ever changes it can be changed everywhere easily."
      ],
      "args": [
        "minimum number of points to add",
        "Roll20 variable name as [bracketed text] to read if configured",
        "character builder variable to base additional scaled might on"
      ]
    },
    {
      "define": [
        "template wall(statistic, value, divisor)",
        "  floor(([statistic] {value}) / divisor)",
        "end"
      ],
      "about": [
        "Generates the appriate tile number scaling for the Reason wall spells."
      ],
      "args": []
    },
    {
      "define": [
        "template is_thrown()",
        "    (item|type|axes + item|type|lances + item|type|swords)",
        "  *",
        "    (item|has_attribute|Ranged)",
        "end"
      ],
      "about": [
        "Whether weapon is a Range 1-2 melee weapon."
      ],
      "args": []
    },
    {
      "define": [
        "template is_hidden()",
        "    (fill is_thrown())",
        "  +",
        "    (item|type|bows) * (item|has_attribute|Stabilizer)",
        "end"
      ],
      "about": [
        "Whether weapon counts as a 'hidden weapon' for conditions."
      ],
      "args": []
    }
  ],
  "tooltips" : {
    "gbp": {
      "name": "Generic Bonus/Penalty",
      "description": [
        "Conditions of the forms @{::[Stat +X]} and @{::[Stat -X]} apply a ",
        "modifier equal to X to the listed Stat. When multiple such ",
        "conditions sharing the same Stat and sign (+ or -) are applied to a ",
        "unit, they merge together into one condition, taking the larger ",
        "magnitude and the longer remaining duration of the two."
      ]
    },
    "variant": {
      "name": "Arts Variants",
      "description": [
        "Arts variants are alternate or additional effects that activate when ",
        "a combat art is used with a specific weapon or tactical art, or when ",
        "a tactical art is used when a weapon possessing a specific attribute ",
        "is equipped."
      ]
    },
    "ap": {
      "name": "Attack Plurality (AP)",
      "description": [
        "AP number determines the number of consecutive attacks (CAs) and ",
        "follow-up attacks (FAs) in combat.\n\n",
        "AP # \u00A0 # CA(s) \u00A0 # FA(s)\n",
        "AP 1 \u00A0 1 CA(s) \u00A0 0 FA(s)\n",
        "AP 2 \u00A0 1 CA(s) \u00A0 1 FA(s)\n",
        "AP 3 \u00A0 2 CA(s) \u00A0 0 FA(s)\n",
        "AP 4 \u00A0 2 CA(s) \u00A0 1 FA(s)\n",
        "AP 5 \u00A0 3 CA(s) \u00A0 0 FA(s)\n\n",
        "Combat arts/metamagic have fixed AP and are unaffected by AP ",
        "modifiers unless otherwise stated."
      ]
    },
    "all": {
      "name": "Skill Rank Requirements",
      "description": [
        "When a group of skill rank requirements (SRRs) is qualified with ",
        "@{style:bold:all} or connected with @{style:bold:and}, you may ",
        "ignore all but one SRR in that group if one those listed is exceeded ",
        "by one or more ranks. SRRs marked with @{style:bold:(required)} ",
        "may not be ignored but may be the one SRR that lets the others ",
        "be. Other requirements may never be ignored."
      ]
    }
  }
}
