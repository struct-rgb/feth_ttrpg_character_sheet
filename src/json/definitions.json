{
  "stats": {
    "names": [
      "hp",
      "str",
      "mag",
      "dex",
      "spd",
      "def",
      "res",
      "lck",
      "mov"
    ],
    "first": [
      "hp",
      "str",
      "mag",
      "dex",
      "spd",
      "def",
      "res",
      "lck",
      "mov"
    ],
    "second": [
      "mt",
      "prot",
      "resl",
      "hit",
      "avo",
      "crit",
      "cravo",
      "minrng",
      "maxrng",
      "sp",
      "tp",
      "spcost",
      "tpcost",
      "doubles",
      "doubled"
    ],
    "defensive": [
      "prot",
      "resl",
      "avo",
      "cravo",
      "doubled"
    ],
    "battalion": {
      "first": [
        "end",
        "atk",
        "prot",
        "resl",
        "auto",
        "plu"
      ],
      "second": [
        "mor",
        "br",
        "minrng",
        "maxrng",
        "hit",
        "mt",
        "epcost"
      ],
      "growths": [
        "end",
        "atk",
        "prot",
        "resl"
      ],
      "gambit": [
      
      ]
    }
  },
  "traits": {
    "Athletics": ["Axes", "Swords", "Lances", "Brawl", "Morph"],
    "Precision": ["Swords", "Reason", "Bows", "Riding", "Morph"],
    "Endurance": ["Brawl", "Armor", "Flying", "Riding"],
    "Canniness": ["Axes", "Guile", "Bows", "Authority", "Morph"],
    "Spirit": ["Faith", "Lances", "Armor", "Authority", "Morph"],
    "Acuity": ["Faith", "Reason", "Guile", "Flying"]
  },
  "skills": [
    "Axes",
    "Swords",
    "Lances",
    "Brawl",
    "Bows",
    "Reason",
    "Faith",
    "Guile",
    "Authority",
    "Armor",
    "Riding",
    "Flying",
    "Morph"
  ],
  "macros": [
    {
      "define": [
        "template affirm(title, yes, no)",
        "  ask [title]",
        "    case No  { no  }",
        "    else Yes { yes }",
        "  end",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the No option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes",
        "an expression for if user selects No"
      ]
    },
    {
      "define": [
        "template deny(title, yes, no)",
        "  ask [title]",
        "    else Yes { yes }",
        "    case No  { no  }",
        "  end",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the Yes option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes",
        "an expression for if user selects No"
      ]
    },
    {
      "define": [
        "template confirm(title, multiplier)",
        "  ((",
        "    ask [title]",
        "      else No  { 0 }",
        "      case Yes { 1 }",
        "    end",
        "  ) * (",
        "    multiplier",
        "  ))",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the No option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes (no is zero)."
      ]
    },
    {
      "define": [
        "template refuse(title, multiplier)",
        "  ((",
        "    ask [title]",
        "      else Yes { 1 }",
        "      case No  { 0 }",
        "    end",
        "  ) * (",
        "    multiplier",
        "  ))",
        "end"
      ],
      "about": [
        "Creates a Yes/No prompt that defaults to the Yes option in the ",
        "character builder and the Yes option in the generated Roll20 macro. "
      ],
      "args": [
        "[bracketed text] that the prompt should display",
        "an expression for if user selects Yes (no is zero)."
      ]
    },
    {
      "define": [
        "template blow(mod)",
        "  metaif builtins|macrogen",
        "    // try to figure out if there's a better conditional for this",
        "    then bothif not(unit|tagged|healing)",
        "      then fill affirm(cat([Unit Initiated? #], mod), mod, 0)",
        "      else 0",
        "    end",
        "    else bothif other|initiative == other|initiative|unit",
        "      then mod",
        "      else 0",
        "    end",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the *blow family of skills that give in-combat bonuses ",
        "when unit initiates combat."
      ],
      "args": [
        "an expression for the bonus granted"
      ]
    },
    {
      "define": [
        "template bowhit(base)",
        "  base",
        "end"
      ],
      "about": [
        "Applies the range penalty prompt to a bow's hit formula"
      ],
      "args": [
        "an expression for the bow's base hit"
      ]
    },
    {
      "define": [
        "template stance(modifier)",
        "  metaif builtins|macrogen",
        "    then fill affirm(cat([Foe Initiated? #], modifier), modifier, 0)",
        "    else bothif other|initiative == other|initiative|foe",
        "      then modifier",
        "      else 0",
        "    end",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the * stance family of skills that give in-combat bonuses ",
        "when a foe initiates combat."
      ],
      "args": [
        "an expression for the bonus granted"
      ]
    },
    {
      "define": [
        "template generic_advantage(variable)",
        "  bothif variable",
        "    then",
        "      max(",
        "        metaif builtins|macrogen",
        "          then other|triangle|prompt",
        "          else other|triangle",
        "        end,",
        "        0",
        "      ) / 3",
        "    else 0",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the * advantage family of skills that give bonuses in ",
        "combat when unit has weapon triangle advantage."
      ],
      "args": [
        "a variable to test for the weapon type"
      ]
    },
    {
      "define": [
        "template advantage(variable)",
        "  bothif variable",
        "    then",
        "      max(",
        "        metaif builtins|macrogen",
        "          then other|triangle|prompt",
        "          else other|triangle",
        "        end,",
        "        0",
        "      ) / 3",
        "    else 0",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the * advantage family of skills that give Mt +5 in ",
        "combat when unit has weapon triangle advantage."
      ],
      "args": [
        "a variable to test for the weapon type"
      ]
    },
    {
      "define": [
        "template arms_shield(variable)",
        "  bothif variable",
        "    then",
        "      max(",
        "        metaif builtins|macrogen",
        "          then other|triangle|prompt",
        "          else other|triangle",
        "        end,",
        "        0",
        "      ) / 5",
        "    else 0",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the * arm shield family of skills that give Prot/Resl +3 in ",
        "combat when unit has weapon triangle advantage."
      ],
      "args": [
        "a variable to test for the weapon type"
      ]
    },
    {
      "define": [
        "template defiant(bonus)",
        "  ask cat([HP ≤ 25%? #], bonus)",
        "    case No  {0}",
        "    else Yes {bonus}",
        "  end",
        "end"
      ],
      "about": [
        "Macro for the Defiant *  family of skills that give stat bonuses in ",
        "combat when unit is at ≤ 25% HP."
      ],
      "args": [
        "an expression for the bonus to give"
      ]
    },
    {
      "define": [
        "template faire(variable)",
        "  bothif variable then 5 else 0 end",
        "end"
      ],
      "about": [
        "Macro for the * advantage family of skills that give Mt +5 in ",
        "combat when unit uses associate weapon type."
      ],
      "args": [
        "a variable to test for the weapon type"
      ]
    },
    {
      "define": [
        "template simplify(expression)",
        "  metaif builtins|macrogen == 1",
        "    then meta(expression)",
        "    else expression",
        "  end",
        "end"
      ],
      "about": [
        "Simplifies expressions in generated Roll20 macros by using [meta] ",
        "to evaluate them at compile time. Using this is safer than using ",
        "meta directly, since it includes a [metaif] guard to evaluate ",
        "the expression normally during runtime."
      ],
      "args": [
        "an expression to evaluate/simplify"
      ]
    },
    {
      "define": [
        "template scale(base, title, variable)",
        "  base + floor(alias([title], fill simplify(variable)) * 0.3)",
        "end"
      ],
      "about": [
        "Implements those combat arts that scale based off of a specific ",
        "statistic. This is a standart template so that if the way they're ",
        "computed ever changes it can be changed everywhere easily."
      ],
      "args": [
        "minimum number of points to add",
        "Roll20 variable name as [bracketed text] to read if configured",
        "character builder variable to base additional scaled might on"
      ]
    },
    {
      "define": [
        "template wall(statistic, value, divisor)",
        "  floor(alias([statistic], value) / divisor)",
        "end"
      ],
      "about": [
        "Generates the appriate tile number scaling for the Reason wall spells."
      ],
      "args": []
    },
    {
      "define": [
        "template is_thrown()",
        "    (item|type|axes + item|type|lances + item|type|swords)",
        "  *",
        "    (item|has_attribute|Ranged)",
        "end"
      ],
      "about": [
        "Whether weapon is a Range 1-2 melee weapon."
      ],
      "args": []
    },
    {
      "define": [
        "template is_hidden()",
        "    (fill is_thrown())",
        "  +",
        "    (item|type|bows) * (item|has_attribute|Stabilizer)",
        "end"
      ],
      "about": [
        "Whether weapon counts as a 'hidden weapon' for conditions."
      ],
      "args": []
    },
    {
      "define": [
        "template prowess_requires(level, skill, rank)",
        "  unit|level >= level and (",
        "    skill >= rank",
        "      or",
        "    unit|rank|Armor  >= rank",
        "      or",
        "    unit|rank|Riding >= rank",
        "      or",
        "    unit|rank|Flying >= rank",
        "  )",
        "end"
      ],
      "about": [
        "Macro that implements a \"Prowess\" scaling for an attribute."
      ],
      "args": [
        "greater than or equal to level",
        "skill rank to check (other than Flying, Armor, Riding, or Morph)",
        "greater than or equal to rank"
      ]
    },
    {
      "define": [
        "template prowess_args(type, skill, one, two, three, four, five)",
        "  bothif type then",
        "    bothif fill prowess_requires(25, skill, 9)",
        "      then five",
        "    elseif fill prowess_requires(15, skill, 7)",
        "      then four",
        "    elseif fill prowess_requires( 5, skill, 5)",
        "      then three",
        "    elseif fill prowess_requires( 1, skill, 3)",
        "      then two",
        "    elseif fill prowess_requires( 1, skill, 1)",
        "      then one",
        "    else",
        "      then 0",
        "    end",
        "  else",
        "    0",
        "  end",
        "end"
      ],
      "about": [
        "Macro that implements a \"Prowess\" scaling for an attribute."
      ],
      "args": [
        "equipped weapon type to check",
        "skill rank to check (other than Flying, Armor, or Riding)",
        "rank one value",
        "rank two value",
        "rank three value",
        "rank four value",
        "rank five value"
      ]
    },
    {
      "define": [
        "template prowess_boon(type, skill)",
        "  fill prowess_args(type, skill, 7, 10, 13, 16, 20)",
        "end"
      ],
      "about": [
        "Macro that implements a high \"Prowess\" scaling for an attribute."
      ],
      "args": [
        "equipped weapon type to check",
        "skill rank to check (other than Flying, Armor, or Riding)"
      ]
    },
    {
      "define": [
        "template prowess_base(type, skill)",
        "  fill prowess_args(type, skill, 6, 8, 10, 12, 15)",
        "end"
      ],
      "about": [
        "Macro that implements a base \"Prowess\" scaling for an attribute."
      ],
      "args": [
        "equipped weapon type to check",
        "skill rank to check (other than Flying, Armor, or Riding)"
      ]
    },
    {
      "define": [
        "template prowess_bane(type, skill)",
        "  fill prowess_args(type, skill, 5, 6, 7, 8, 10)",
        "end"
      ],
      "about": [
        "Macro that implements a low \"Prowess\" scaling for an attribute."
      ],
      "args": [
        "equipped weapon type to check",
        "skill rank to check (other than Flying, Armor, or Riding)"
      ]
    },
    {
      "define": [
        "template breaker(type, skill)",
        "  ask cat(type, [breaker?])",
        "    else No {0}",
        "    case Yes {",
        "      bothif skill >= 8 // Rank A",
        "        then 30",
        "      elseif skill >= 6 // Rank B",
        "        then 20",
        "      else",
        "        then 0",
        "      end",
        "    }",
        "  end",
        "end"
      ],
      "about": [
        "Macro that implements scaling breaker abilities."
      ],
      "args": [
        "prefix for prompt",
        "skill rank variable"
      ]
    },
    {
      "define": [
        "template inner(value)",
        "  let a = value then a;",
        "end"
      ],
      "about": [
        "Tests how templates interact with local variables"
      ],
      "args": [
        "an expression"
      ]
    },
    {
      "define": [
        "template indirect(macro, value)",
        "  fill macro(value)",
        "end"
      ],
      "about": [
        "Tests how templates with fillable macros interact with local variable"
      ],
      "args": [
        "a macro name",
        "an expression"
      ]
    },
    {
      "define": [
        "template local(value)",
        "  let a = value then fill inner(a);",
        "end"
      ],
      "about": [
        "Tests how templates interact with local variables"
      ],
      "args": [
        "an expression"
      ]
    },
    {
      "define": [
        "template third(value)",
        "  let a = value then fill local(a) + fill local(a);",
        "end"
      ],
      "about": [
        "Tests how templates interact with local variables"
      ],
      "args": [
        "an expression"
      ]
    },
    {
      "define": [
        "template identity(expression)",
        "  expression",
        "end"
      ],
      "about": [
        "Performs no transformation; used to debug compiler's macro expansion."
      ],
      "args": [
        "an expression"
      ]
    }
  ],
  "tooltips" : {
    "gbp": {
      "name": "Generic Bonus/Penalty",
      "description": [
        "Conditions of the forms @{style}{bold}{[Stat +X]} and ",
        "@{style}{bold}{[Stat -X]} apply a modifier equal to X to the listed ",
        "Stat. When multiple such conditions sharing the same Stat and sign ",
        "(+ or -) are applied to a unit, they merge together into one ",
        "condition, taking the larger magnitude and the longer remaining ",
        "duration of the two."
      ]
    },
    "variant": {
      "name": "Arts Variants",
      "description": [
        "Arts variants are alternate or additional effects that activate when ",
        "a combat art is used with a specific weapon or tactical art, or when ",
        "a tactical art is used when a weapon possessing a specific attribute ",
        "is equipped."
      ]
    },
    "ap": {
      "name": "Attack Plurality (AP)",
      "description": [
        "AP number determines the number of consecutive attacks (CAs) and ",
        "follow-up attacks (FAs) in combat.\n\n",
        "AP # \u00A0 # CA(s) \u00A0 # FA(s)\n",
        "AP 1 \u00A0 1 CA(s) \u00A0 0 FA(s)\n",
        "AP 2 \u00A0 1 CA(s) \u00A0 1 FA(s)\n",
        "AP 3 \u00A0 2 CA(s) \u00A0 0 FA(s)\n",
        "AP 4 \u00A0 2 CA(s) \u00A0 1 FA(s)\n",
        "AP 5 \u00A0 3 CA(s) \u00A0 0 FA(s)\n\n",
        "Combat/metamagic arts have fixed AP and are unaffected by AP ",
        "modifiers unless otherwise stated."
      ]
    },
    "all": {
      "name": "Skill Rank Requirements",
      "description": [
        "When a group of skill rank requirements (SRRs) is qualified with ",
        "@{style}{bold}{all} or connected with @{style}{bold}{and}, you may ",
        "ignore all but one SRR in that group if one those listed is exceeded ",
        "by one or more ranks. SRRs marked with @{style}{bold}{(required)} ",
        "may not be ignored but may be the one SRR that lets the others ",
        "be. Other requirements may never be ignored."
      ]
    },
    "treatment":  {
      "name": "“Treatment” Attributes",
      "description": [
        "A series of @{item}{Heal} and @{item}{First Aid Kit} attributes that ",
        "add the chance to trigger a critical heal when used, granting ",
        "various bonus effects. @{attribute}{Treatment: Critical} increases ",
        "the amount healed, while the others use HP restored in excess of ",
        "Max HP as a resource to fuel their effects."
      ]
    },
    "structure":  {
      "name": "“Structure” Attributes",
      "description": [
        "A series of attributes that are mutually exclusive with each other ",
        "and can only be added when an item is first purchased. In exchange, ",
        "they typically possess low rank increases and gold costs."
      ]
    },
    "conjure":  {
      "name": "“Conjure” Attributes",
      "description": [
        "A series of mutually exclusive attributes that specify what type of ",
        "phantom unit an item creates, if it is able to create phantom units.",
        "Any effect that creates a phantom without specifying the type and",
        "an without @{style}{bold}{“Conjure”} attribute creates a ",
        "@{class}{Lemure} unit."
      ]
    },
    "phantom":  {
      "name": "Phantoms",
      "description": [
        "Temporary units that can be created with various effects, notably ",
        "those of @{item}{Summon} and @{art}{Invoked}. A created phantom is ",
        "the same level as the unit that created it and belongs to the same ",
        "army while the Weapons, Arts, and Abilities it possesses are rolled ",
        "on a table according to its type and level. All weapons a phantom is ",
        "created with had the bound attribute, and any other items in a ",
        "phantom's inventory go to the convoy when it is defeated. A unit can ",
        "only control one phantom at a time (unless specified otherwise). If ",
        "a unit would use an effect that creates a phantom while that units ",
        "already controls a phantom, the effect is replaced with warping the ",
        "existing phantom into the relevant space."
      ]
    },
    "prowess": {
      "name": "Prowess",
      "description": [
        "A bonus that scales based on character Level (Lv) and the Rank (Ra) ",
        "of the relevant skill, as well as if the relevant statistic is weak ",
        "(Lo), neutral (Ne), or strong (Hi) for that skill's prowess:\n\n",
        "@{style}{table}{",
          "Ra \u00A0 Lv \u00A0 Lo \u00A0 Ne \u00A0 Hi\n",
          "E+ \u00A0 \u00A01 \u00A0 \u00A05 \u00A0 \u00A06 \u00A0 \u00A07\n",
          "D+ \u00A0 \u00A01 \u00A0 \u00A06 \u00A0 \u00A08 \u00A0 10\n",
          "C+ \u00A0 \u00A05 \u00A0 \u00A07 \u00A0 10 \u00A0 13\n",
          "B+ \u00A0 10 \u00A0 \u00A08 \u00A0 12 \u00A0 16\n",
          "A+ \u00A0 15 \u00A0 10 \u00A0 15 \u00A0 20\n",
        "}"
      ]
    },
    "prowess_boon": {
      "name": "Prowess Boon",
      "description": [
        "A bonus that scales based on the Rank of the relevant skill:\n\n",
        "Rank E+ \u00A0 7\n",
        "Rank D+ \u00A0 10\n",
        "Rank C+ \u00A0 13\n",
        "Rank B+ \u00A0 16\n",
        "Rank A+ \u00A0 20\n"
      ]
    },
    "prowess_base": {
      "name": "Prowess Base",
      "description": [
        "A bonus that scales based on the Rank of the relevant skill:\n\n",
        "Rank E+ \u00A0 6\n",
        "Rank D+ \u00A0 8\n",
        "Rank C+ \u00A0 10\n",
        "Rank B+ \u00A0 12\n",
        "Rank A+ \u00A0 15\n"
      ]
    },
    "prowess_bane": {
      "name": "Prowess Bane",
      "description": [
        "A bonus that scales based on the Rank of the relevant skill:\n\n",
        "Rank E+ \u00A0 5\n",
        "Rank D+ \u00A0 6\n",
        "Rank C+ \u00A0 7\n",
        "Rank B+ \u00A0 8\n",
        "Rank A+ \u00A0 10\n"
      ]
    },
    "sbac": {
      "name": "SBAC",
      "description": [
        "Statistic-based actication chance abilities (SBACs) have a percentage ",
        "chance (one of the user's statistics + a modifier) to activate when a ",
        "specified trigger occurs. Crest abilities are not SBACs."
      ]
    },
    "Swords": {
      "name": "Swords",
      "description": [
        "Melee skill focused on hit, avoid, debuffs and multiple attacks. ",
        "Strong against Axes and Bows."
      ]
    },
    "Lances": {
      "name": "Lances",
      "description": [
        "Melee skill focused on counterattacks and synergy with auxilary skills. ",
        "Strong against Swords and Bows."
      ]
    },
    "Axes": {
      "name": "Axes",
      "description": [
        "Melee skill focused on offense, self-reliance, and rewarding risk. ",
        "Strong against Lances and Bows."
      ]
    },
    "Brawl": {
      "name": "Brawl",
      "description": [
        "Melee skill focused on flexibility"
      ]
    },
    "Bows": {
      "name": "Bows",
      "description": []
    },
    "Faith": {
      "name": "Faith",
      "description": [
        "Spellcasting skill focused on ally support and magic resistance. ",
        "Strong against Guile and Brawl."
      ]
    },
    "Reason": {
      "name": "Reason'",
      "description": []
    },
    "Guile": {
      "name": "Guile",
      "description": []
    },
    "Armor": {
      "name": "Armor",
      "description": []
    },
    "Riding": {
      "name": "Riding",
      "description": []
    },
    "Flying": {
      "name": "Flying",
      "description": []
    },
    "Morph": {
      "name": "Morph",
      "description": []
    },
    "Other": {
      "name": "Other",
      "description": []
    },
    "Authority": {
      "name": "Authority",
      "description": []
    },
    "Athletics": {
      "name": "Athletics",
      "description": [
        "Measure of power strength and prowess. Ex: smashing objects, ",
        "bracing doors, wrestling foes, and sprinting."
      ]
    },
    "Precision": {
      "name": "Precision",
      "description": [
        "Measure"
      ]
    },
    "Endurance": {
      "name": "Endurance",
      "description": []
    },
    "Canniness": {
      "name": "Canniness",
      "description": []
    },
    "Spirit": {
      "name": "Authority",
      "description": []
    },
    "Acuity": {
      "name": "Authority",
      "description": []
    }
  }
}
